Name: Francisco de Melo



Role: Python Back-end

Abstract: I implemented the solution using Flask, it was my first time using this API.
I wanted to try it out. The framework is pretty much straight and deploys the solution easily. Later on I deployed the solution on linux Debian, after much trial because of the debug mode on flask. 




Instace access: 
http://35.243.255.204:5000

Example: http://35.243.255.204:5000/count?dominant_color=brown&OTHER_THING=blue




Description


1. PostMan to do the get/post tests and export the query script.

2. Flask for the development

3. For the unit test it worked great and I used the -v to see which ones were failing.

4. Between 'CONSTAINS IGNORING CASE' and 'MATCH', is the exact comparison. Match is the exact comparison.
5. PEP Standard



Issues:

1. Python version installation 2.7 vs 3.5

2. String comparion CASE INSENSITIVE

3. Windows vs Linux

4. Google Api Key error

5. SQL Constains vs Match

6. Python methods are void - string.sort()

7. Created an Google console account

8. Sign the port 5000

9. Debug mode on Flask




Suggestions:

1. Create a local DB, using flask_sqlalchemy 

2. Complete the full suite

3. Improve the unit tests for each helper function 


4. Lint the code for small things, like bare except


Observations:
1. To run in linux at the background using python api.py &. To finish it: Use the command 'sudo netstat -tulnp | grep :5000' to find the process at door 5000 then to just kill the process.
2. The average unit tests are taking 0.669s. Profiling will show that most of the time is spent on the query at google, so to speed-up it's possible to use a local memory for common queries.

Deliverables:
1. Deployed at http://35.243.255.204:5000
2. https://github.com/FranciscoMeloJr/Python-Tests/tree/master/dogs-of-nyc-api

Time:
I finished the local code at 12:30am, and I spent all the rest of the time setting up the instances at google cloud services, which I think was a very important part of the drill.


Final comment:
I really liked to do the project, even with the remote instances not taking so much time to work. I think it's not difficult and can be done in 2h or less if all the environment is properly set.


Sources:

1. https://www.fullstackpython.com/flask.html

2. Stackoverflow


